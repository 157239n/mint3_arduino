#include <ESP_EEPROM.h>
#include <ArduinoJson.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <SoftwareSerial.h>

unsigned long ac_off[] = {0,4423,8837,9450,10996,11599,12075,12679,14261,14837,16392,16995,17471,18075,18551,19155,20709,21313,21786,22390,22866,23470,25024,25628,26104,26707,27183,27787,29341,29945,31500,32103,32579,33174,34728,35332,35817,36412,37966,38570,40124,40728,42282,42886,44440,45044,45520,46123,47675,48279,49833,50437,51991,52595,53071,53675,54151,54755,55231,55835,56311,56914,58469,59073,59549,60143,60628,61223,62777,63381,64935,65539,67093,67697,68173,68777,69253,69857,70333,70937,71413,72015,72491,73094,73570,74174,74650,75254,75730,76325,77888,78483,80046,80650,82195,82799,84353,84957,86511,87115,92279,96645,101059,101672,103218,103821,104307,104901,106455,107059,108614,109217,109693,110297,110773,111377,112931,113535,114011,114615,115091,115695,117249,117853,118329,118933,119409,120004,121567,122167,123722,124325,124801,125405,126959,127563,128039,128634,130188,130792,132346,132950,134504,135108,136662,137266,137742,138346,139900,140504,142058,142662,144217,144820,145296,145900,146376,146974,147450,148054,148530,149106,150660,151264,151740,152344,152820,153424,154978,155582,157136,157740,159294,159898,160374,160978,161454,162058,162534,163129,163614,164208,164684,165288,165764,166368,166844,167448,167924,168528,170082,170686,172238,172842,174396,175000,176554,177158,178712,179316,1000000,1000000};
unsigned long ac_20[]  = {0,4396,8782,9414,10968,11572,12048,12652,14206,14810,16364,16968,17471,18039,18524,19118,20673,21276,21762,22356,22832,23409,24961,25565,26041,26645,27121,27724,29279,29855,31409,32013,32489,33093,34647,35251,35727,36331,36807,37411,38965,39569,41123,41727,43281,43885,45439,46043,47597,48201,49753,50330,51884,52460,54015,54618,55094,55698,56174,56778,57254,57849,58334,58929,59414,60009,60485,61088,61564,62168,62644,63221,64775,65379,65855,66459,66935,67538,68014,68618,69094,69671,70147,70751,72305,72909,74456,75060,75536,76112,77666,78270,79825,80401,81954,82531,84085,84671,86216,86792,91956,96324,100745,101349,102904,103480,103956,104532,106087,106663,108217,108794,109270,109846,110322,110899,112453,113002,113533,114082,114613,115189,116743,117292,117823,118372,118903,119452,121052,121610,123210,123786,124269,124818,126427,126977,127507,128056,128578,129127,130736,131285,132894,133443,135052,135601,137210,137759,139368,139917,141526,142076,143685,144234,145843,146392,146922,147472,148002,148551,149080,149629,150160,150682,151212,151761,152292,152841,153363,153921,154443,155001,156601,157150,157681,158230,158761,159282,159813,160362,160893,161442,161973,162522,164131,164680,166289,166838,167396,167918,169527,170076,171676,172234,173843,174385,175994,176543,178152,178701,1000000,1000000};
unsigned long ac_22[]  = {0,4368,8766,9398,10943,11546,12032,12626,14181,14784,16339,16942,17418,18022,18498,19102,20656,21233,21709,22313,22789,23393,24947,25551,26027,26620,27106,27700,29264,29868,31420,32014,32500,33103,34648,35252,35756,36332,36808,37412,38966,39570,41124,41728,43282,43886,45440,46044,47626,48202,49757,50360,51915,52519,54073,54677,55153,55729,56203,56807,57283,57887,58363,58967,59443,60037,60522,61117,61602,62197,63751,64355,65909,66513,68067,68671,69147,69751,70227,70803,71279,71883,72359,72963,74517,75121,75597,76201,76677,77281,77757,78352,79906,80510,82062,82666,84229,84824,86378,86982,92145,96532,100956,101541,103095,103690,104166,104770,106327,106931,108485,109089,109565,110169,110645,111249,112803,113407,113883,114478,114954,115558,117112,117688,118164,118768,119244,119848,121402,122006,123560,124164,124640,125217,126770,127374,127850,128426,128902,129506,131058,131635,133189,133793,135347,135951,137505,138109,139663,140240,141794,142370,143925,144501,146055,146659,147135,147712,148187,148791,149267,149844,150320,150896,151372,151949,152425,153001,153477,154054,155608,156210,157764,158340,159894,160498,160974,161578,162054,162631,163107,163683,164159,164736,166290,166866,167342,167891,168422,168971,169502,170051,171660,172209,173818,174367,175976,176525,178134,178683,1000000,1000000};
unsigned long ac_23[]  = {0,4396,8794,9417,10971,11575,12051,12655,14209,14813,16366,16970,17446,18050,18526,19130,20675,21260,21736,22331,22816,23411,24965,25569,26054,26649,27125,27701,29255,29859,31411,32015,32491,33068,34622,35226,35702,36306,36782,37358,38912,39516,41070,41674,43228,43832,45386,45990,47545,48148,49703,50307,51861,52437,53991,54595,55071,55675,56151,56753,57229,57833,58309,58885,59361,59965,60441,61036,61521,62116,63670,64274,64777,65353,66908,67484,67960,68564,69040,69644,70120,70696,71172,71776,73330,73907,74383,74987,76541,77145,77621,78225,79770,80383,81935,82511,84093,84642,86196,86773,91936,96295,100719,101323,102877,103453,103929,104533,106087,106666,108221,108797,109273,109877,110380,110957,112511,113115,113591,114167,114643,115238,116791,117377,117853,118448,118933,119509,121054,121640,123194,123771,124247,124851,126396,126981,127457,128034,128510,129113,130659,131244,132796,133373,134927,135503,137058,137634,139188,139765,141319,141895,143450,144026,145580,146157,146633,147209,147685,148262,148738,149314,149790,150366,150842,151419,151895,152471,152947,153524,155078,155654,156130,156714,158268,158845,159321,159897,160373,160949,161453,162029,162505,163082,164627,165212,165688,166265,167819,168396,168871,169448,171002,171579,173133,173709,175263,175840,177394,177971,1000000,1000000};
unsigned long ac_24[]  = {0,4396,8820,9396,10996,11554,12085,12634,14234,14792,16392,16950,17472,18021,18551,19100,20709,21258,21789,22338,22869,23422,25022,25580,26102,26651,27182,27731,29340,29889,31498,32047,32578,33127,34736,35285,35816,36365,36895,37445,39054,39603,41202,41761,43361,43919,45519,46077,47677,48235,49833,50391,51991,52549,54149,54707,55229,55787,56309,56858,57388,57937,58468,59017,59548,60097,60628,61177,61708,62257,63857,64415,64946,65495,66016,66547,67069,67627,68149,68707,69229,69778,70308,70858,72467,72988,73517,74066,75675,76224,77833,78382,79991,80540,82149,82698,84307,84856,86465,87014,92224,96592,101039,101589,103198,103747,104277,104826,106435,106985,108594,109143,109673,110222,110753,111302,112902,113433,113964,114513,115044,115593,117193,117751,118272,118830,119351,119901,121510,122059,123666,124215,124746,125295,126904,127453,127984,128533,129064,129613,131222,131771,133380,133929,135538,136087,137687,138245,139854,140403,142012,142561,144161,144720,146319,146878,147399,147957,148477,149035,149557,150106,150637,151186,151717,152266,152796,153345,153876,154425,156034,156583,157114,157636,158167,158716,159246,159796,160326,160875,161397,161946,162477,163026,164635,165184,165715,166264,167873,168422,170031,170580,172189,172738,174345,174894,176503,177052,178661,179210,1000000,1000000};
unsigned long ac_25[]  = {0,4396,8819,9341,10968,11499,12057,12579,14206,14737,16364,16895,17453,17975,18528,19049,20686,21207,21765,22287,22845,23367,24994,25525,26074,26605,27154,27657,29285,29815,31443,31973,32523,33053,34681,35211,35760,36282,36840,37362,38998,39520,41156,41651,43285,43807,45443,45965,47601,48123,49759,50281,51917,52439,54075,54597,55155,55677,56235,56757,57315,57837,58395,58916,59466,59996,60545,61067,62703,63225,64862,65383,65941,66463,67021,67543,68101,68621,69179,69700,70259,70780,71339,71860,72418,72940,73489,74020,75647,76178,77805,78336,79963,80485,82121,82643,84279,84801,86438,86959,92196,96570,101011,101542,103169,103672,104222,104752,106380,106901,108538,109059,109618,110139,110697,111219,112855,113377,113935,114457,115015,115537,117173,117695,118247,118769,119327,119849,121485,122007,123643,124165,124723,125245,126881,127403,127961,128483,129041,129535,131172,131693,133321,133851,135488,136010,137637,138168,139795,140298,141926,142456,144091,144612,146249,146770,147319,147850,148399,148930,149479,150010,150559,151081,151639,152161,152719,153240,154877,155398,157035,157557,158115,158636,159195,159716,160265,160796,161345,161876,162425,162947,163505,164026,164585,165106,165665,166186,167823,168342,169979,170500,172137,172658,174295,174816,176453,176975,178611,179133,1000000,1000000};
unsigned long ac_26[]  = {0,4405,8820,9376,11003,11534,12083,12605,14241,14763,16399,16921,17479,18001,18559,19053,20689,21211,21769,22291,22840,23343,24971,25501,26050,26554,27103,27606,29234,29764,31392,31922,32471,32993,34633,35155,35713,36235,36793,37314,38942,39473,41100,41631,43258,43789,45416,45938,47574,48096,49730,50260,51888,52418,54046,54576,55126,55647,56205,56727,57285,57807,58365,58887,59442,59963,60521,61043,62679,63201,64838,65359,65917,66439,68075,68597,69155,69677,70235,70757,71315,71809,72367,72888,73437,73968,74517,75039,76675,77206,77755,78277,79913,80407,82044,82566,84200,84731,86358,86889,92116,96485,100936,101457,103094,103615,104173,104695,106332,106853,108490,109011,109567,110089,110647,111169,112805,113327,113885,114407,114965,115487,117123,117645,118203,118725,119274,119804,121432,121953,123590,124121,124670,125191,126828,127349,127908,128429,128987,129509,131145,131667,133304,133825,135457,135979,137615,138137,139773,140267,141904,142425,144062,144556,146193,146714,147272,147794,148352,148874,149432,149954,150512,151034,151592,152113,152662,153193,154821,155351,156979,157509,158058,158589,160222,160744,161293,161824,162373,162895,163453,163974,164533,165054,165612,166134,166692,167214,168850,169372,169930,170452,172097,172609,174246,174767,176404,176925,178553,179083,1000000,1000000};
unsigned long ac_27[]  = {0,4396,8819,9368,10996,11499,12048,12579,14206,14710,16344,16865,17424,17945,18504,18998,20625,21156,21714,22236,22785,23316,24943,25474,26023,26544,27103,27624,29261,29782,31419,31913,32471,32993,34629,35151,35709,36231,36789,37311,38938,39469,41103,41625,43261,43783,45419,45941,47568,48099,49726,50257,51884,52415,54042,54573,55122,55653,56202,56724,57282,57804,58362,58883,59442,59963,60521,61043,62670,63201,63750,64254,64812,65336,66963,67494,68043,68564,69123,69617,70175,70697,71255,71777,72335,72856,74493,75015,76651,77173,77731,78252,79880,80411,82037,82540,84168,84698,86326,86829,92064,96432,100883,101377,103014,103535,104093,104615,106251,106773,108410,108931,109489,110011,110560,111091,112718,113249,113798,114329,114878,115407,117034,117565,118114,118635,119194,119715,121352,121873,123510,124031,124590,125111,126748,127269,127827,128322,128880,129402,131038,131560,133187,133718,135345,135876,137503,138034,139661,140192,141826,142348,143984,144479,146115,146637,147186,147716,148266,148796,149345,149876,150425,150919,151478,151999,152558,153079,154716,155237,155795,156290,156848,157370,159006,159528,160086,160607,161166,161687,162246,162767,163316,163847,164396,164918,166556,167078,168714,169236,169794,170288,171925,172419,174056,174577,176214,176735,178372,178866,1000000,1000000};

void sendSignal(unsigned long* ac_22) {
  digitalWrite(12, HIGH); delay(50);
  unsigned long startTime = micros();
  unsigned long lastTime = startTime;
  unsigned long now;
  int value = 1; int state = 0; int it = 0; // value: 0 (osc), 1 (low), it: iterator time
  while (true) {
    now = micros();
    if ((lastTime-startTime) <= ac_22[it] && ac_22[it] < (now-startTime)) { // then transitions
      value = 1-value; it++; if (ac_22[it] > 999999) return;
    }
    if (value == 0) { state = 1-state; digitalWrite(12, state); }
    else { digitalWrite(12, LOW); }
    lastTime = now; // delay: 13.16us
    asm("nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
  }
  digitalWrite(12, HIGH);
}

long deviceId = 0;
JsonDocument postRequest(String url, String jsonString) { // url: expects to start with a "/"
  String res = "{}";
  if (WiFi.status() == WL_CONNECTED) {
    WiFiClient client; HTTPClient http; http.setTimeout(10000);
    http.begin(client, "http://dhcp.aigu.vn" + url);
    http.addHeader("Content-Type", "application/json");
    if (http.POST(jsonString) > 0) res = http.getString();
  } JsonDocument doc; deserializeJson(doc, res); return doc;
}
void clipLastChar(String& a) { a.remove(a.length()-1, 1); }
bool debug = true; void print(String msg) { if (debug) Serial.print(msg); } void println(String msg) { if (debug) Serial.println(msg); }

unsigned long poll_lastPoll = 0; String pollJson = ""; float poll_freq = 1;
void handlePoll() {
  unsigned long now = millis(); if (poll_lastPoll > now) { poll_lastPoll = 0; } // for overflow
  if (now - poll_lastPoll > 1000.0/poll_freq) {
    println("polling: " + String(random(3, 30))); poll_lastPoll = now; // tag along freqRead data if we're recording
    if (pollJson.length() > 0) clipLastChar(pollJson); pollJson = "{\"results\":[" + pollJson + "]}";
    // println("pollJson: " + pollJson);
    JsonDocument doc = postRequest("/poll/" + String(deviceId), pollJson); int dId = doc["deviceId"]; pollJson = "";
    if (dId <= 0) { return; } poll_freq = doc["freq"]; int nComs = doc["nComs"]; // request unsuccessful
    for (int i = 0; i < nComs; i++) {
      auto payload = doc["commands"][i];
      pollJson = pollJson + "{\"comId\":" + String(payload["comId"]) + ",\"result\":";
      if (payload["type"] == "digitalWrite") {
        Serial.println("digitalWrite:" + String(payload["pin"]));
        pollJson = pollJson + "0},";
        if (payload["pin"] == 0) { sendSignal(ac_off);
        } else if (payload["pin"] == 1) { for (int i = 0; i<4; i++) { sendSignal(ac_24); delay(100); }
        } else if (payload["pin"] == 20) { sendSignal(ac_20);
        } else if (payload["pin"] == 21) { // sendSignal(ac_22);
        } else if (payload["pin"] == 22) { sendSignal(ac_22);
        } else if (payload["pin"] == 23) { sendSignal(ac_23);
        } else if (payload["pin"] == 24) { sendSignal(ac_24);
        } else if (payload["pin"] == 25) { sendSignal(ac_25);
        } else if (payload["pin"] == 26) { sendSignal(ac_26);
        } else if (payload["pin"] == 27) { sendSignal(ac_27);
        } else { pinMode(payload["pin"], OUTPUT); digitalWrite(payload["pin"], (int) (payload["onoff"])); }
      } else if (payload["type"] == "analogWrite")  {
        pollJson = pollJson + "0},"; pinMode(payload["pin"], OUTPUT); analogWrite(payload["pin"], ((int) payload["value"])*256/100);
      } else { pollJson = pollJson + "\"notimplemented\"},"; }
    }
  }
}

void setup() {
  EEPROM.begin(16); EEPROM.get(0, deviceId); Serial.begin(9600); WiFi.begin("Quang Ho", "quangho2000");
  println("Connecting to wifi..."); while (WiFi.status() != WL_CONNECTED) { delay(100); print("."); } println("Connected to wifi");
  if (deviceId == 0) { // registers a new device
    deviceId = postRequest("/newId", "{\"project\":\"nothing\",\"model\":\"esp8266\"}")["id"];
    if (deviceId > 0) { EEPROM.put(0, deviceId); EEPROM.commit(); } // request actually successful
  }
  pinMode(LED_BUILTIN, OUTPUT); digitalWrite(LED_BUILTIN, HIGH);
  pinMode(14, OUTPUT); pinMode(14, LOW); pinMode(12, OUTPUT); digitalWrite(12, 1);
}

void loop() {
  handlePoll();
}



